

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Oct 25 04:42:57 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.44
    19                           ; Generated 14/09/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F452 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     _TRISD	set	3989
    53  0000                     _RD0	set	31768
    54  0000                     _RD1	set	31769
    55  0000                     _RD7	set	31775
    56  0000                     _RD6	set	31774
    57  0000                     _RD5	set	31773
    58  0000                     _RD4	set	31772
    59                           
    60                           	psect	smallconst
    61  000600                     __psmallconst:
    62                           	opt stack 0
    63  000600  00                 	db	0
    64  000601                     STR_1:
    65  000601  48                 	db	72	;'H'
    66  000602  65                 	db	101	;'e'
    67  000603  6C                 	db	108	;'l'
    68  000604  6C                 	db	108	;'l'
    69  000605  6F                 	db	111	;'o'
    70  000606  20                 	db	32
    71  000607  57                 	db	87	;'W'
    72  000608  6F                 	db	111	;'o'
    73  000609  72                 	db	114	;'r'
    74  00060A  6C                 	db	108	;'l'
    75  00060B  64                 	db	100	;'d'
    76  00060C  00                 	db	0
    77                           
    78                           ; #config settings
    79  00060D  00                 	db	0	; dummy byte at the end
    80  0000                     
    81                           	psect	cinit
    82  000800                     __pcinit:
    83                           	opt stack 0
    84  000800                     start_initialization:
    85                           	opt stack 0
    86  000800                     __initialization:
    87                           	opt stack 0
    88  000800                     end_of_initialization:
    89                           	opt stack 0
    90  000800                     __end_of__initialization:
    91                           	opt stack 0
    92  000800  0E00               	movlw	low (__Lsmallconst shr (0+16))
    93  000802  6EF8               	movwf	tblptru,c
    94  000804  0E06               	movlw	high __Lsmallconst
    95  000806  6EF7               	movwf	tblptrh,c
    96  000808  0100               	movlb	0
    97  00080A  EFDA  F003         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           tblptrh	equ	0xFF7
   100                           
   101                           	psect	cstackCOMRAM
   102  000001                     __pcstackCOMRAM:
   103                           	opt stack 0
   104  000001                     Lcd_Port@a:
   105                           	opt stack 0
   106                           
   107                           ; 1 bytes @ 0x0
   108  000001                     	ds	1
   109  000002                     ??_Lcd_Cmd:
   110  000002                     Lcd_Write_Char@temp:
   111                           	opt stack 0
   112                           
   113                           ; 1 bytes @ 0x1
   114  000002                     	ds	1
   115  000003                     Lcd_Cmd@a:
   116                           	opt stack 0
   117  000003                     Lcd_Write_Char@y:
   118                           	opt stack 0
   119                           
   120                           ; 1 bytes @ 0x2
   121  000003                     	ds	1
   122  000004                     ??_Lcd_Init:
   123  000004                     Lcd_Set_Cursor@b:
   124                           	opt stack 0
   125  000004                     Lcd_Write_Char@a:
   126                           	opt stack 0
   127                           
   128                           ; 1 bytes @ 0x3
   129  000004                     	ds	1
   130  000005                     Lcd_Set_Cursor@a:
   131                           	opt stack 0
   132  000005                     Lcd_Write_String@a:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x4
   136  000005                     	ds	1
   137  000006                     Lcd_Set_Cursor@z:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x5
   141  000006                     	ds	1
   142  000007                     ??_Lcd_Write_String:
   143  000007                     Lcd_Set_Cursor@y:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x6
   147  000007                     	ds	1
   148  000008                     Lcd_Set_Cursor@temp:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x7
   152  000008                     	ds	1
   153  000009                     Lcd_Write_String@i:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x8
   157  000009                     	ds	2
   158  00000B                     tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           
   161                           ; 1 bytes @ 0xA
   162 ;;
   163 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   164 ;;
   165 ;; *************** function _main *****************
   166 ;; Defined at:
   167 ;;		line 24 in file "../LAB1_LCD_XC8.X/lab1_lcd_xc8.c"
   168 ;; Parameters:    Size  Location     Type
   169 ;;		None
   170 ;; Auto vars:     Size  Location     Type
   171 ;;  a               2    0        unsigned int 
   172 ;; Return value:  Size  Location     Type
   173 ;;                  2   61[None  ] int 
   174 ;; Registers used:
   175 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   176 ;; Tracked objects:
   177 ;;		On entry : 0/0
   178 ;;		On exit  : 0/0
   179 ;;		Unchanged: 0/0
   180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   181 ;;      Params:         0       0       0       0       0       0       0
   182 ;;      Locals:         0       0       0       0       0       0       0
   183 ;;      Temps:          0       0       0       0       0       0       0
   184 ;;      Totals:         0       0       0       0       0       0       0
   185 ;;Total ram usage:        0 bytes
   186 ;; Hardware stack levels required when called:    3
   187 ;; This function calls:
   188 ;;		_Lcd_Init
   189 ;;		_Lcd_Set_Cursor
   190 ;;		_Lcd_Write_String
   191 ;; This function is called by:
   192 ;;		Startup code after reset
   193 ;; This function uses a non-reentrant model
   194 ;;
   195                           
   196                           	psect	text0
   197  0007B4                     __ptext0:
   198                           	opt stack 0
   199  0007B4                     _main:
   200                           	opt stack 0
   201  0007B4  FFFF               	dw	65535	; assembler added errata NOP
   202                           
   203                           ;lab1_lcd_xc8.c: 26: unsigned int a;
   204                           ;lab1_lcd_xc8.c: 27: TRISD = 0x00;
   205                           
   206                           ;incstack = 0
   207  0007B6  0E00               	movlw	0
   208  0007B8  6E95               	movwf	3989,c	;volatile
   209                           
   210                           ;lab1_lcd_xc8.c: 28: Lcd_Init();
   211  0007BA  EC07  F003         	call	_Lcd_Init	;wreg free
   212                           
   213                           ;lab1_lcd_xc8.c: 32: Lcd_Set_Cursor(2,4);
   214  0007BE  0E04               	movlw	4
   215  0007C0  6E04               	movwf	Lcd_Set_Cursor@b,c
   216  0007C2  0E02               	movlw	2
   217  0007C4  EC70  F003         	call	_Lcd_Set_Cursor
   218                           
   219                           ;lab1_lcd_xc8.c: 33: Lcd_Write_String("Hello World");
   220  0007C8  0E01               	movlw	low STR_1
   221  0007CA  6E05               	movwf	Lcd_Write_String@a,c
   222  0007CC  0E06               	movlw	high STR_1
   223  0007CE  6E06               	movwf	Lcd_Write_String@a+1,c
   224  0007D0  EC44  F003         	call	_Lcd_Write_String	;wreg free
   225  0007D4  0003               	sleep		;# 
   226                           
   227                           ;lab1_lcd_xc8.c: 37: return 0;}
   228                           ;	Return value of _main is never used
   229  0007D6  EF01  F000         	goto	start
   230  0007DA                     __end_of_main:
   231                           	opt stack 0
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           
   235 ;; *************** function _Lcd_Write_String *****************
   236 ;; Defined at:
   237 ;;		line 97 in file "../LAB1_LCD_XC8.X/lcd.h"
   238 ;; Parameters:    Size  Location     Type
   239 ;;  a               2    4[COMRAM] PTR unsigned char 
   240 ;;		 -> STR_1(12), 
   241 ;; Auto vars:     Size  Location     Type
   242 ;;  i               2    8[COMRAM] int 
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : 0/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   252 ;;      Params:         2       0       0       0       0       0       0
   253 ;;      Locals:         2       0       0       0       0       0       0
   254 ;;      Temps:          2       0       0       0       0       0       0
   255 ;;      Totals:         6       0       0       0       0       0       0
   256 ;;Total ram usage:        6 bytes
   257 ;; Hardware stack levels used:    1
   258 ;; Hardware stack levels required when called:    2
   259 ;; This function calls:
   260 ;;		_Lcd_Write_Char
   261 ;; This function is called by:
   262 ;;		_main
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text1
   267  000688                     __ptext1:
   268                           	opt stack 0
   269  000688                     _Lcd_Write_String:
   270                           	opt stack 0
   271  000688  FFFF               	dw	65535	; assembler added errata NOP
   272                           
   273                           ;lcd.h: 99: int i;
   274                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   275                           
   276                           ;incstack = 0
   277  00068A  0E00               	movlw	0
   278  00068C  6E0A               	movwf	Lcd_Write_String@i+1,c
   279  00068E  0E00               	movlw	0
   280  000690  6E09               	movwf	Lcd_Write_String@i,c
   281  000692  D012               	goto	l48
   282  000694  FFFF               	dw	65535	; assembler added errata NOP
   283                           
   284                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   285  000696  5009               	movf	Lcd_Write_String@i,w,c
   286  000698  2405               	addwf	Lcd_Write_String@a,w,c
   287  00069A  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   288  00069C  500A               	movf	Lcd_Write_String@i+1,w,c
   289  00069E  2006               	addwfc	Lcd_Write_String@a+1,w,c
   290  0006A0  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   291  0006A2  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   292  0006A6  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   293  0006AA                     	if	0	;tblptru may be non-zero
   294  0006AA                     	endif
   295  0006AA                     	if	0	;tblptru may be non-zero
   296  0006AA                     	endif
   297  0006AA  0008               	tblrd		*
   298  0006AC  FFFF               	dw	65535	; errata NOP
   299  0006AE  50F5               	movf	tablat,w,c
   300  0006B0  ECBC  F003         	call	_Lcd_Write_Char
   301  0006B4  4A09               	infsnz	Lcd_Write_String@i,f,c
   302  0006B6  2A0A               	incf	Lcd_Write_String@i+1,f,c
   303  0006B8                     l48:
   304  0006B8  FFFF               	dw	65535	; assembler added errata NOP
   305  0006BA  5009               	movf	Lcd_Write_String@i,w,c
   306  0006BC  2405               	addwf	Lcd_Write_String@a,w,c
   307  0006BE  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   308  0006C0  500A               	movf	Lcd_Write_String@i+1,w,c
   309  0006C2  2006               	addwfc	Lcd_Write_String@a+1,w,c
   310  0006C4  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   311  0006C6  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   312  0006CA  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   313  0006CE                     	if	0	;tblptru may be non-zero
   314  0006CE                     	endif
   315  0006CE                     	if	0	;tblptru may be non-zero
   316  0006CE                     	endif
   317  0006CE  0008               	tblrd		*
   318  0006D0  FFFF               	dw	65535	; errata NOP
   319  0006D2  50F5               	movf	tablat,w,c
   320  0006D4  0900               	iorlw	0
   321  0006D6  B4D8               	btfsc	status,2,c
   322  0006D8  0012               	return		;funcret
   323  0006DA  FFFF               	dw	65535	; assembler added errata NOP
   324  0006DC  D7DB               	goto	l49
   325  0006DE  FFFF               	dw	65535	; errata NOP
   326  0006E0                     __end_of_Lcd_Write_String:
   327                           	opt stack 0
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           status	equ	0xFD8
   333                           
   334 ;; *************** function _Lcd_Write_Char *****************
   335 ;; Defined at:
   336 ;;		line 81 in file "../LAB1_LCD_XC8.X/lcd.h"
   337 ;; Parameters:    Size  Location     Type
   338 ;;  a               1    wreg     unsigned char 
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  a               1    3[COMRAM] unsigned char 
   341 ;;  y               1    2[COMRAM] unsigned char 
   342 ;;  temp            1    1[COMRAM] unsigned char 
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   352 ;;      Params:         0       0       0       0       0       0       0
   353 ;;      Locals:         3       0       0       0       0       0       0
   354 ;;      Temps:          0       0       0       0       0       0       0
   355 ;;      Totals:         3       0       0       0       0       0       0
   356 ;;Total ram usage:        3 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    1
   359 ;; This function calls:
   360 ;;		_Lcd_Port
   361 ;; This function is called by:
   362 ;;		_Lcd_Write_String
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	text2
   367  000778                     __ptext2:
   368                           	opt stack 0
   369  000778                     _Lcd_Write_Char:
   370                           	opt stack 0
   371  000778  FFFF               	dw	65535	; assembler added errata NOP
   372                           
   373                           ;incstack = 0
   374                           ;Lcd_Write_Char@a stored from wreg
   375  00077A  6E04               	movwf	Lcd_Write_Char@a,c
   376                           
   377                           ;lcd.h: 83: char temp,y;
   378                           ;lcd.h: 84: temp = a&0x0F;
   379  00077C  5004               	movf	Lcd_Write_Char@a,w,c
   380  00077E  0B0F               	andlw	15
   381  000780  6E02               	movwf	Lcd_Write_Char@temp,c
   382                           
   383                           ;lcd.h: 85: y = a&0xF0;
   384  000782  5004               	movf	Lcd_Write_Char@a,w,c
   385  000784  0BF0               	andlw	240
   386  000786  6E03               	movwf	Lcd_Write_Char@y,c
   387                           
   388                           ;lcd.h: 86: RD1 = 1;
   389  000788  8283               	bsf	3971,1,c	;volatile
   390                           
   391                           ;lcd.h: 87: Lcd_Port(y>>4);
   392  00078A  3803               	swapf	Lcd_Write_Char@y,w,c
   393  00078C  0B0F               	andlw	15
   394  00078E  EC9C  F003         	call	_Lcd_Port
   395                           
   396                           ;lcd.h: 88: RD0 = 1;
   397  000792  8083               	bsf	3971,0,c	;volatile
   398                           
   399                           ;lcd.h: 89: _delay((unsigned long)((40)*(4000000/4000000.0)));
   400  000794  0E0A               	movlw	10
   401  000796                     u117:
   402  000796  FFFF               	dw	65535	; errata NOP
   403  000798  2EE8               	decfsz	wreg,f,c
   404  00079A  D7FD               	bra	u117
   405                           
   406                           ;lcd.h: 90: RD0 = 0;
   407  00079C  9083               	bcf	3971,0,c	;volatile
   408                           
   409                           ;lcd.h: 91: Lcd_Port(temp);
   410  00079E  5002               	movf	Lcd_Write_Char@temp,w,c
   411  0007A0  EC9C  F003         	call	_Lcd_Port
   412                           
   413                           ;lcd.h: 92: RD0 = 1;
   414  0007A4  8083               	bsf	3971,0,c	;volatile
   415                           
   416                           ;lcd.h: 93: _delay((unsigned long)((40)*(4000000/4000000.0)));
   417  0007A6  0E0A               	movlw	10
   418  0007A8                     u127:
   419  0007A8  FFFF               	dw	65535	; errata NOP
   420  0007AA  2EE8               	decfsz	wreg,f,c
   421  0007AC  D7FD               	bra	u127
   422                           
   423                           ;lcd.h: 94: RD0 = 0;
   424  0007AE  9083               	bcf	3971,0,c	;volatile
   425  0007B0  0012               	return		;funcret
   426  0007B2  FFFF               	dw	65535	; errata NOP
   427  0007B4                     __end_of_Lcd_Write_Char:
   428                           	opt stack 0
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           wreg	equ	0xFE8
   434                           status	equ	0xFD8
   435                           
   436 ;; *************** function _Lcd_Set_Cursor *****************
   437 ;; Defined at:
   438 ;;		line 41 in file "../LAB1_LCD_XC8.X/lcd.h"
   439 ;; Parameters:    Size  Location     Type
   440 ;;  a               1    wreg     unsigned char 
   441 ;;  b               1    3[COMRAM] unsigned char 
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  a               1    4[COMRAM] unsigned char 
   444 ;;  temp            1    7[COMRAM] unsigned char 
   445 ;;  y               1    6[COMRAM] unsigned char 
   446 ;;  z               1    5[COMRAM] unsigned char 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, status,2, status,0, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   456 ;;      Params:         1       0       0       0       0       0       0
   457 ;;      Locals:         4       0       0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0       0       0
   459 ;;      Totals:         5       0       0       0       0       0       0
   460 ;;Total ram usage:        5 bytes
   461 ;; Hardware stack levels used:    1
   462 ;; Hardware stack levels required when called:    2
   463 ;; This function calls:
   464 ;;		_Lcd_Cmd
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text3
   471  0006E0                     __ptext3:
   472                           	opt stack 0
   473  0006E0                     _Lcd_Set_Cursor:
   474                           	opt stack 0
   475  0006E0  FFFF               	dw	65535	; assembler added errata NOP
   476                           
   477                           ;incstack = 0
   478                           ;Lcd_Set_Cursor@a stored from wreg
   479  0006E2  6E05               	movwf	Lcd_Set_Cursor@a,c
   480                           
   481                           ;lcd.h: 43: char temp,z,y;
   482                           ;lcd.h: 44: if(a == 1)
   483  0006E4  0405               	decf	Lcd_Set_Cursor@a,w,c
   484  0006E6  A4D8               	btfss	status,2,c
   485  0006E8  D010               	goto	l36
   486                           
   487                           ;lcd.h: 45: {
   488                           ;lcd.h: 46: temp = 0x80 + b - 1;
   489  0006EA  5004               	movf	Lcd_Set_Cursor@b,w,c
   490  0006EC  0F7F               	addlw	127
   491  0006EE  6E08               	movwf	Lcd_Set_Cursor@temp,c
   492                           
   493                           ;lcd.h: 47: z = temp>>4;
   494  0006F0  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   495  0006F2  0B0F               	andlw	15
   496  0006F4  6E06               	movwf	Lcd_Set_Cursor@z,c
   497                           
   498                           ;lcd.h: 48: y = temp & 0x0F;
   499  0006F6  5008               	movf	Lcd_Set_Cursor@temp,w,c
   500  0006F8  0B0F               	andlw	15
   501  0006FA  6E07               	movwf	Lcd_Set_Cursor@y,c
   502                           
   503                           ;lcd.h: 49: Lcd_Cmd(z);
   504  0006FC  5006               	movf	Lcd_Set_Cursor@z,w,c
   505  0006FE  ECED  F003         	call	_Lcd_Cmd
   506                           
   507                           ;lcd.h: 50: Lcd_Cmd(y);
   508  000702  5007               	movf	Lcd_Set_Cursor@y,w,c
   509  000704  ECED  F003         	call	_Lcd_Cmd
   510                           
   511                           ;lcd.h: 51: }
   512  000708  D014               	goto	l38
   513  00070A                     l36:
   514  00070A  FFFF               	dw	65535	; assembler added errata NOP
   515                           
   516                           ;lcd.h: 52: else if(a == 2)
   517  00070C  0E02               	movlw	2
   518  00070E  1805               	xorwf	Lcd_Set_Cursor@a,w,c
   519  000710  A4D8               	btfss	status,2,c
   520  000712  D00F               	goto	l38
   521                           
   522                           ;lcd.h: 53: {
   523                           ;lcd.h: 54: temp = 0xC0 + b - 1;
   524  000714  5004               	movf	Lcd_Set_Cursor@b,w,c
   525  000716  0FBF               	addlw	191
   526  000718  6E08               	movwf	Lcd_Set_Cursor@temp,c
   527                           
   528                           ;lcd.h: 55: z = temp>>4;
   529  00071A  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   530  00071C  0B0F               	andlw	15
   531  00071E  6E06               	movwf	Lcd_Set_Cursor@z,c
   532                           
   533                           ;lcd.h: 56: y = temp & 0x0F;
   534  000720  5008               	movf	Lcd_Set_Cursor@temp,w,c
   535  000722  0B0F               	andlw	15
   536  000724  6E07               	movwf	Lcd_Set_Cursor@y,c
   537                           
   538                           ;lcd.h: 57: Lcd_Cmd(z);
   539  000726  5006               	movf	Lcd_Set_Cursor@z,w,c
   540  000728  ECED  F003         	call	_Lcd_Cmd
   541                           
   542                           ;lcd.h: 58: Lcd_Cmd(y);
   543  00072C  5007               	movf	Lcd_Set_Cursor@y,w,c
   544  00072E  ECED  F003         	call	_Lcd_Cmd
   545  000732                     l38:
   546  000732  FFFF               	dw	65535	; assembler added errata NOP
   547  000734  0012               	return		;funcret
   548  000736  FFFF               	dw	65535	; errata NOP
   549  000738                     __end_of_Lcd_Set_Cursor:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           wreg	equ	0xFE8
   556                           status	equ	0xFD8
   557                           
   558 ;; *************** function _Lcd_Init *****************
   559 ;; Defined at:
   560 ;;		line 62 in file "../LAB1_LCD_XC8.X/lcd.h"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   574 ;;      Params:         0       0       0       0       0       0       0
   575 ;;      Locals:         0       0       0       0       0       0       0
   576 ;;      Temps:          1       0       0       0       0       0       0
   577 ;;      Totals:         1       0       0       0       0       0       0
   578 ;;Total ram usage:        1 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    2
   581 ;; This function calls:
   582 ;;		_Lcd_Cmd
   583 ;;		_Lcd_Port
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text4
   590  00060E                     __ptext4:
   591                           	opt stack 0
   592  00060E                     _Lcd_Init:
   593                           	opt stack 0
   594  00060E  FFFF               	dw	65535	; assembler added errata NOP
   595                           
   596                           ;lcd.h: 64: Lcd_Port(0x00);
   597                           
   598                           ;incstack = 0
   599  000610  0E00               	movlw	0
   600  000612  EC9C  F003         	call	_Lcd_Port
   601                           
   602                           ;lcd.h: 65: _delay((unsigned long)((20)*(4000000/4000.0)));
   603  000616  0E14               	movlw	20
   604  000618  6E04               	movwf	??_Lcd_Init& (0+255),c
   605  00061A  0E7D               	movlw	125
   606  00061C                     u137:
   607  00061C  FFFF               	dw	65535	; errata NOP
   608  00061E  2EE8               	decfsz	wreg,f,c
   609  000620  D7FD               	bra	u137
   610  000622  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   611  000624  D7FB               	bra	u137
   612  000626  D000               	nop2	
   613                           
   614                           ;lcd.h: 66: Lcd_Cmd(0x03);
   615  000628  0E03               	movlw	3
   616  00062A  ECED  F003         	call	_Lcd_Cmd
   617                           
   618                           ;lcd.h: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
   619  00062E  0E05               	movlw	5
   620  000630  6E04               	movwf	??_Lcd_Init& (0+255),c
   621  000632  0EDF               	movlw	223
   622  000634                     u147:
   623  000634  FFFF               	dw	65535	; errata NOP
   624  000636  2EE8               	decfsz	wreg,f,c
   625  000638  D7FD               	bra	u147
   626  00063A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   627  00063C  D7FB               	bra	u147
   628                           
   629                           ;lcd.h: 68: Lcd_Cmd(0x03);
   630  00063E  0E03               	movlw	3
   631  000640  ECED  F003         	call	_Lcd_Cmd
   632                           
   633                           ;lcd.h: 69: _delay((unsigned long)((11)*(4000000/4000.0)));
   634  000644  0E0B               	movlw	11
   635  000646  6E04               	movwf	??_Lcd_Init& (0+255),c
   636  000648  0EB8               	movlw	184
   637  00064A                     u157:
   638  00064A  FFFF               	dw	65535	; errata NOP
   639  00064C  2EE8               	decfsz	wreg,f,c
   640  00064E  D7FD               	bra	u157
   641  000650  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   642  000652  D7FB               	bra	u157
   643                           
   644                           ;lcd.h: 70: Lcd_Cmd(0x03);
   645  000654  0E03               	movlw	3
   646  000656  ECED  F003         	call	_Lcd_Cmd
   647                           
   648                           ;lcd.h: 72: Lcd_Cmd(0x02);
   649  00065A  0E02               	movlw	2
   650  00065C  ECED  F003         	call	_Lcd_Cmd
   651                           
   652                           ;lcd.h: 73: Lcd_Cmd(0x02);
   653  000660  0E02               	movlw	2
   654  000662  ECED  F003         	call	_Lcd_Cmd
   655                           
   656                           ;lcd.h: 74: Lcd_Cmd(0x08);
   657  000666  0E08               	movlw	8
   658  000668  ECED  F003         	call	_Lcd_Cmd
   659                           
   660                           ;lcd.h: 75: Lcd_Cmd(0x00);
   661  00066C  0E00               	movlw	0
   662  00066E  ECED  F003         	call	_Lcd_Cmd
   663                           
   664                           ;lcd.h: 76: Lcd_Cmd(0x0C);
   665  000672  0E0C               	movlw	12
   666  000674  ECED  F003         	call	_Lcd_Cmd
   667                           
   668                           ;lcd.h: 77: Lcd_Cmd(0x00);
   669  000678  0E00               	movlw	0
   670  00067A  ECED  F003         	call	_Lcd_Cmd
   671                           
   672                           ;lcd.h: 78: Lcd_Cmd(0x06);
   673  00067E  0E06               	movlw	6
   674  000680  ECED  F003         	call	_Lcd_Cmd
   675  000684  0012               	return		;funcret
   676  000686  FFFF               	dw	65535	; errata NOP
   677  000688                     __end_of_Lcd_Init:
   678                           	opt stack 0
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           wreg	equ	0xFE8
   684                           status	equ	0xFD8
   685                           
   686 ;; *************** function _Lcd_Cmd *****************
   687 ;; Defined at:
   688 ;;		line 26 in file "../LAB1_LCD_XC8.X/lcd.h"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  a               1    wreg     unsigned char 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  a               1    2[COMRAM] unsigned char 
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, status,2, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   702 ;;      Params:         0       0       0       0       0       0       0
   703 ;;      Locals:         1       0       0       0       0       0       0
   704 ;;      Temps:          1       0       0       0       0       0       0
   705 ;;      Totals:         2       0       0       0       0       0       0
   706 ;;Total ram usage:        2 bytes
   707 ;; Hardware stack levels used:    1
   708 ;; Hardware stack levels required when called:    1
   709 ;; This function calls:
   710 ;;		_Lcd_Port
   711 ;; This function is called by:
   712 ;;		_Lcd_Set_Cursor
   713 ;;		_Lcd_Init
   714 ;;		_Lcd_Clear
   715 ;;		_Lcd_Shift_Right
   716 ;;		_Lcd_Shift_Left
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           	psect	text5
   721  0007DA                     __ptext5:
   722                           	opt stack 0
   723  0007DA                     _Lcd_Cmd:
   724                           	opt stack 0
   725  0007DA  FFFF               	dw	65535	; assembler added errata NOP
   726                           
   727                           ;incstack = 0
   728                           ;Lcd_Cmd@a stored from wreg
   729  0007DC  6E03               	movwf	Lcd_Cmd@a,c
   730                           
   731                           ;lcd.h: 28: RD1 = 0;
   732  0007DE  9283               	bcf	3971,1,c	;volatile
   733                           
   734                           ;lcd.h: 29: Lcd_Port(a);
   735  0007E0  5003               	movf	Lcd_Cmd@a,w,c
   736  0007E2  EC9C  F003         	call	_Lcd_Port
   737                           
   738                           ;lcd.h: 30: RD0 = 1;
   739  0007E6  8083               	bsf	3971,0,c	;volatile
   740                           
   741                           ;lcd.h: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
   742  0007E8  0E04               	movlw	4
   743  0007EA  6E02               	movwf	??_Lcd_Cmd& (0+255),c
   744  0007EC  0EE5               	movlw	229
   745  0007EE                     u167:
   746  0007EE  FFFF               	dw	65535	; errata NOP
   747  0007F0  2EE8               	decfsz	wreg,f,c
   748  0007F2  D7FD               	bra	u167
   749  0007F4  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
   750  0007F6  D7FB               	bra	u167
   751  0007F8  D000               	nop2	
   752                           
   753                           ;lcd.h: 32: RD0 = 0;
   754  0007FA  9083               	bcf	3971,0,c	;volatile
   755  0007FC  0012               	return		;funcret
   756  0007FE  FFFF               	dw	65535	; errata NOP
   757  000800                     __end_of_Lcd_Cmd:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           wreg	equ	0xFE8
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _Lcd_Port *****************
   767 ;; Defined at:
   768 ;;		line 4 in file "../LAB1_LCD_XC8.X/lcd.h"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  a               1    wreg     unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  a               1    0[COMRAM] unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   782 ;;      Params:         0       0       0       0       0       0       0
   783 ;;      Locals:         1       0       0       0       0       0       0
   784 ;;      Temps:          0       0       0       0       0       0       0
   785 ;;      Totals:         1       0       0       0       0       0       0
   786 ;;Total ram usage:        1 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; This function calls:
   789 ;;		Nothing
   790 ;; This function is called by:
   791 ;;		_Lcd_Cmd
   792 ;;		_Lcd_Init
   793 ;;		_Lcd_Write_Char
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text6
   798  000738                     __ptext6:
   799                           	opt stack 0
   800  000738                     _Lcd_Port:
   801                           	opt stack 0
   802  000738  FFFF               	dw	65535	; assembler added errata NOP
   803                           
   804                           ;incstack = 0
   805                           ;Lcd_Port@a stored from wreg
   806  00073A  6E01               	movwf	Lcd_Port@a,c
   807                           
   808                           ;lcd.h: 6: if(a & 1)
   809  00073C  A001               	btfss	Lcd_Port@a,0,c
   810  00073E  D002               	goto	l19
   811                           
   812                           ;lcd.h: 7: RD4 = 1;
   813  000740  8883               	bsf	3971,4,c	;volatile
   814  000742  D002               	goto	l20
   815  000744                     l19:
   816  000744  FFFF               	dw	65535	; assembler added errata NOP
   817                           
   818                           ;lcd.h: 8: else
   819                           ;lcd.h: 9: RD4 = 0;
   820  000746  9883               	bcf	3971,4,c	;volatile
   821  000748                     l20:
   822  000748  FFFF               	dw	65535	; assembler added errata NOP
   823                           
   824                           ;lcd.h: 11: if(a & 2)
   825  00074A  A201               	btfss	Lcd_Port@a,1,c
   826  00074C  D002               	goto	l21
   827                           
   828                           ;lcd.h: 12: RD5 = 1;
   829  00074E  8A83               	bsf	3971,5,c	;volatile
   830  000750  D002               	goto	l22
   831  000752                     l21:
   832  000752  FFFF               	dw	65535	; assembler added errata NOP
   833                           
   834                           ;lcd.h: 13: else
   835                           ;lcd.h: 14: RD5 = 0;
   836  000754  9A83               	bcf	3971,5,c	;volatile
   837  000756                     l22:
   838  000756  FFFF               	dw	65535	; assembler added errata NOP
   839                           
   840                           ;lcd.h: 16: if(a & 4)
   841  000758  A401               	btfss	Lcd_Port@a,2,c
   842  00075A  D002               	goto	l23
   843                           
   844                           ;lcd.h: 17: RD6 = 1;
   845  00075C  8C83               	bsf	3971,6,c	;volatile
   846  00075E  D002               	goto	l24
   847  000760                     l23:
   848  000760  FFFF               	dw	65535	; assembler added errata NOP
   849                           
   850                           ;lcd.h: 18: else
   851                           ;lcd.h: 19: RD6 = 0;
   852  000762  9C83               	bcf	3971,6,c	;volatile
   853  000764                     l24:
   854  000764  FFFF               	dw	65535	; assembler added errata NOP
   855                           
   856                           ;lcd.h: 21: if(a & 8)
   857  000766  A601               	btfss	Lcd_Port@a,3,c
   858  000768  D002               	goto	l25
   859                           
   860                           ;lcd.h: 22: RD7 = 1;
   861  00076A  8E83               	bsf	3971,7,c	;volatile
   862  00076C  D002               	goto	l26
   863  00076E                     l25:
   864  00076E  FFFF               	dw	65535	; assembler added errata NOP
   865                           
   866                           ;lcd.h: 23: else
   867                           ;lcd.h: 24: RD7 = 0;
   868  000770  9E83               	bcf	3971,7,c	;volatile
   869  000772                     l26:
   870  000772  FFFF               	dw	65535	; assembler added errata NOP
   871  000774  0012               	return		;funcret
   872  000776  FFFF               	dw	65535	; errata NOP
   873  000778                     __end_of_Lcd_Port:
   874                           	opt stack 0
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           wreg	equ	0xFE8
   880                           status	equ	0xFD8
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           wreg	equ	0xFE8
   886                           status	equ	0xFD8
   887                           
   888                           	psect	rparam
   889  0000                     tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           wreg	equ	0xFE8
   894                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     10      10
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     842
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     286
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     421
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      A       A       1        7.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Oct 25 04:42:57 2017

                                                                 l20 0748  
                                                                 l21 0752  
                                                                 l22 0756  
                                                                 l23 0760  
                                                                 l24 0764  
                                                                 l25 076E  
                                                                 l26 0772  
                                                                 l19 0744  
                                                                 l36 070A  
                                                                 l38 0732  
                                                                 l48 06B8  
                                                                 l49 0694  
                                                                _RD0 007C18  
                                                                _RD1 007C19  
                                                                _RD4 007C1C  
                                                                _RD5 007C1D  
                                                                _RD6 007C1E  
                                                                _RD7 007C1F  
                                                                u117 0796  
                                                                u127 07A8  
                                                                u137 061C  
                                                                u147 0634  
                                                                u157 064A  
                                                                u167 07EE  
                                                       __CFG_CPD$OFF 000000  
                                                                wreg 000FE8  
                                                       __CFG_LVP$OFF 000000  
                                                               STR_1 0601  
                                                  ?_Lcd_Write_String 0005  
                                                               _main 07B4  
                                                               start 0002  
                                                 ??_Lcd_Write_String 0007  
                                                    __end_of_Lcd_Cmd 0800  
                                                       ___param_bank 000000  
                                                              ?_main 0001  
                                            __size_of_Lcd_Set_Cursor 0058  
                                                              _TRISD 000F95  
                                                              tablat 000FF5  
                                                              status 000FD8  
                                                   __end_of_Lcd_Init 0688  
                                                   __end_of_Lcd_Port 0778  
                                                    __initialization 0800  
                                                       __end_of_main 07DA  
                                                             ??_main 000B  
                                                      __activetblptr 000001  
                                                          ??_Lcd_Cmd 0002  
                                            __size_of_Lcd_Write_Char 003C  
                                                       __mediumconst 0000  
                                                             tblptrh 000FF7  
                                                             tblptrl 000FF6  
                                                             tblptru 000FF8  
                                                    Lcd_Set_Cursor@a 0005  
                                                    Lcd_Set_Cursor@b 0004  
                                                    Lcd_Set_Cursor@y 0007  
                                                    Lcd_Set_Cursor@z 0006  
                                                         __accesstop 0080  
                                            __end_of__initialization 0800  
                                                      ___rparam_used 000001  
                                                     __pcstackCOMRAM 0001  
                                                     _Lcd_Set_Cursor 06E0  
                                                          ?_Lcd_Init 0001  
                                                          ?_Lcd_Port 0001  
                                          __size_of_Lcd_Write_String 0058  
                                             __end_of_Lcd_Set_Cursor 0738  
                                                         ??_Lcd_Init 0004  
                                                         ??_Lcd_Port 0001  
                                                     _Lcd_Write_Char 0778  
                                                            _Lcd_Cmd 07DA  
                                                            __Hparam 0000  
                                                            __Lparam 0000  
                                                       __psmallconst 0600  
                                                            __pcinit 0800  
                                                            __ramtop 0600  
                                                    ?_Lcd_Set_Cursor 0004  
                                                            __ptext0 07B4  
                                                            __ptext1 0688  
                                                            __ptext2 0778  
                                                            __ptext3 06E0  
                                                            __ptext4 060E  
                                                            __ptext5 07DA  
                                                            __ptext6 0738  
                                             __end_of_Lcd_Write_Char 07B4  
                                               end_of_initialization 0800  
                                                          Lcd_Port@a 0001  
                                                    ?_Lcd_Write_Char 0001  
                                                  Lcd_Write_String@a 0005  
                                                  Lcd_Write_String@i 0009  
                                                   _Lcd_Write_String 0688  
                                                start_initialization 0800  
                                                  __size_of_Lcd_Init 007A  
                                                  __size_of_Lcd_Port 0040  
                                                    Lcd_Write_Char@a 0004  
                                                    Lcd_Write_Char@y 0003  
                                                           ?_Lcd_Cmd 0001  
                                                   ??_Lcd_Set_Cursor 0005  
                                                        __smallconst 0600  
                                                           Lcd_Cmd@a 0003  
                                                   ??_Lcd_Write_Char 0002  
                                                           _Lcd_Init 060E  
                                                           _Lcd_Port 0738  
                                           __end_of_Lcd_Write_String 06E0  
                                                   __size_of_Lcd_Cmd 0026  
                                                           __Hrparam 0000  
                                                           __Lrparam 0000  
                                                       __Lsmallconst 0600  
                                                      __size_of_main 0026  
                                                 Lcd_Write_Char@temp 0002  
                                                 Lcd_Set_Cursor@temp 0008  
